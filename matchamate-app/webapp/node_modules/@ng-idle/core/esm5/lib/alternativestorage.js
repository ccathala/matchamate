/*
 * Represents an alternative storage for browser that doesn't support localstorage. (i.e. Safari in
 * private mode)
 * @implements Storage
 */
var AlternativeStorage = /** @class */ (function () {
    function AlternativeStorage() {
        this.storageMap = {};
    }
    Object.defineProperty(AlternativeStorage.prototype, "length", {
        /*
         * Returns an integer representing the number of data items stored in the storageMap object.
         */
        get: function () {
            return Object.keys(this.storageMap).length;
        },
        enumerable: true,
        configurable: true
    });
    /*
     * Remove all keys out of the storage.
     */
    AlternativeStorage.prototype.clear = function () {
        this.storageMap = {};
    };
    /*
     * Return the key's value
     *
     * @param key - name of the key to retrieve the value of.
     * @return The key's value
     */
    AlternativeStorage.prototype.getItem = function (key) {
        if (typeof this.storageMap[key] !== 'undefined') {
            return this.storageMap[key];
        }
        return null;
    };
    /*
     * Return the nth key in the storage
     *
     * @param index - the number of the key you want to get the name of.
     * @return The name of the key.
     */
    AlternativeStorage.prototype.key = function (index) {
        return Object.keys(this.storageMap)[index] || null;
    };
    /*
     * Remove a key from the storage.
     *
     * @param key - the name of the key you want to remove.
     */
    AlternativeStorage.prototype.removeItem = function (key) {
        this.storageMap[key] = undefined;
    };
    /*
     * Add a key to the storage, or update a key's value if it already exists.
     *
     * @param key - the name of the key.
     * @param value - the value you want to give to the key.
     */
    AlternativeStorage.prototype.setItem = function (key, value) {
        this.storageMap[key] = value;
    };
    return AlternativeStorage;
}());
export { AlternativeStorage };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWx0ZXJuYXRpdmVzdG9yYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWlkbGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9hbHRlcm5hdGl2ZXN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUNIO0lBQUE7UUFDVSxlQUFVLEdBQVEsRUFBRSxDQUFDO0lBNEQvQixDQUFDO0lBdkRDLHNCQUFJLHNDQUFNO1FBSFY7O1dBRUc7YUFDSDtZQUNFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQzdDLENBQUM7OztPQUFBO0lBRUQ7O09BRUc7SUFDSCxrQ0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsb0NBQU8sR0FBUCxVQUFRLEdBQVc7UUFDakIsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssV0FBVyxFQUFFO1lBQy9DLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM3QjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsZ0NBQUcsR0FBSCxVQUFJLEtBQWE7UUFDZixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQztJQUNyRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHVDQUFVLEdBQVYsVUFBVyxHQUFXO1FBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILG9DQUFPLEdBQVAsVUFBUSxHQUFXLEVBQUUsS0FBYTtRQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBSUgseUJBQUM7QUFBRCxDQUFDLEFBN0RELElBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFJlcHJlc2VudHMgYW4gYWx0ZXJuYXRpdmUgc3RvcmFnZSBmb3IgYnJvd3NlciB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBsb2NhbHN0b3JhZ2UuIChpLmUuIFNhZmFyaSBpblxuICogcHJpdmF0ZSBtb2RlKVxuICogQGltcGxlbWVudHMgU3RvcmFnZVxuICovXG5leHBvcnQgY2xhc3MgQWx0ZXJuYXRpdmVTdG9yYWdlIGltcGxlbWVudHMgU3RvcmFnZSB7XG4gIHByaXZhdGUgc3RvcmFnZU1hcDogYW55ID0ge307XG5cbiAgLypcbiAgICogUmV0dXJucyBhbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIGRhdGEgaXRlbXMgc3RvcmVkIGluIHRoZSBzdG9yYWdlTWFwIG9iamVjdC5cbiAgICovXG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuc3RvcmFnZU1hcCkubGVuZ3RoO1xuICB9XG5cbiAgLypcbiAgICogUmVtb3ZlIGFsbCBrZXlzIG91dCBvZiB0aGUgc3RvcmFnZS5cbiAgICovXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcmFnZU1hcCA9IHt9O1xuICB9XG5cbiAgLypcbiAgICogUmV0dXJuIHRoZSBrZXkncyB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0ga2V5IC0gbmFtZSBvZiB0aGUga2V5IHRvIHJldHJpZXZlIHRoZSB2YWx1ZSBvZi5cbiAgICogQHJldHVybiBUaGUga2V5J3MgdmFsdWVcbiAgICovXG4gIGdldEl0ZW0oa2V5OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuc3RvcmFnZU1hcFtrZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZU1hcFtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qXG4gICAqIFJldHVybiB0aGUgbnRoIGtleSBpbiB0aGUgc3RvcmFnZVxuICAgKlxuICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgbnVtYmVyIG9mIHRoZSBrZXkgeW91IHdhbnQgdG8gZ2V0IHRoZSBuYW1lIG9mLlxuICAgKiBAcmV0dXJuIFRoZSBuYW1lIG9mIHRoZSBrZXkuXG4gICAqL1xuICBrZXkoaW5kZXg6IG51bWJlcik6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnN0b3JhZ2VNYXApW2luZGV4XSB8fCBudWxsO1xuICB9XG5cbiAgLypcbiAgICogUmVtb3ZlIGEga2V5IGZyb20gdGhlIHN0b3JhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgLSB0aGUgbmFtZSBvZiB0aGUga2V5IHlvdSB3YW50IHRvIHJlbW92ZS5cbiAgICovXG4gIHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JhZ2VNYXBba2V5XSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qXG4gICAqIEFkZCBhIGtleSB0byB0aGUgc3RvcmFnZSwgb3IgdXBkYXRlIGEga2V5J3MgdmFsdWUgaWYgaXQgYWxyZWFkeSBleGlzdHMuXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgLSB0aGUgbmFtZSBvZiB0aGUga2V5LlxuICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgeW91IHdhbnQgdG8gZ2l2ZSB0byB0aGUga2V5LlxuICAgKi9cbiAgc2V0SXRlbShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc3RvcmFnZU1hcFtrZXldID0gdmFsdWU7XG4gIH1cblxuICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIFtpbmRleDogbnVtYmVyXTogc3RyaW5nO1xufVxuIl19