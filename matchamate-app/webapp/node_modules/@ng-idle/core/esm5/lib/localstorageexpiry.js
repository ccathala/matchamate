import { __decorate, __extends, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { IdleExpiry } from './idleexpiry';
import { LocalStorage } from './localstorage';
/*
 * Represents a localStorage store of expiry values.
 * @extends IdleExpiry
 */
var LocalStorageExpiry = /** @class */ (function (_super) {
    __extends(LocalStorageExpiry, _super);
    function LocalStorageExpiry(localStorage) {
        var _this = _super.call(this) || this;
        _this.localStorage = localStorage;
        _this.idleName = 'main';
        return _this;
    }
    /*
     * Gets or sets the last expiry date in localStorage.
     * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.
     * @param value - The expiry value to set; omit to only return the value.
     * @return The current expiry value.
     */
    LocalStorageExpiry.prototype.last = function (value) {
        if (value !== void 0) {
            this.setExpiry(value);
        }
        return this.getExpiry();
    };
    LocalStorageExpiry.prototype.idling = function (value) {
        if (value !== void 0) {
            this.setIdling(value);
        }
        return this.getIdling();
    };
    /*
     * Gets the idle name.
     * @return The name of the idle.
     */
    LocalStorageExpiry.prototype.getIdleName = function () {
        return this.idleName;
    };
    /*
     * Sets the idle name.
     * @param The name of the idle.
     */
    LocalStorageExpiry.prototype.setIdleName = function (key) {
        if (key) {
            this.idleName = key;
        }
    };
    LocalStorageExpiry.prototype.getExpiry = function () {
        var expiry = this.localStorage.getItem(this.idleName + '.expiry');
        if (expiry) {
            return new Date(parseInt(expiry, 10));
        }
        else {
            return null;
        }
    };
    LocalStorageExpiry.prototype.setExpiry = function (value) {
        if (value) {
            this.localStorage.setItem(this.idleName + '.expiry', value.getTime().toString());
        }
        else {
            this.localStorage.removeItem(this.idleName + '.expiry');
        }
    };
    LocalStorageExpiry.prototype.getIdling = function () {
        var idling = this.localStorage.getItem(this.idleName + '.idling');
        if (idling) {
            return idling === 'true';
        }
        else {
            return false;
        }
    };
    LocalStorageExpiry.prototype.setIdling = function (value) {
        if (value) {
            this.localStorage.setItem(this.idleName + '.idling', value.toString());
        }
        else {
            this.localStorage.setItem(this.idleName + '.idling', 'false');
        }
    };
    LocalStorageExpiry.ctorParameters = function () { return [
        { type: LocalStorage }
    ]; };
    LocalStorageExpiry = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [LocalStorage])
    ], LocalStorageExpiry);
    return LocalStorageExpiry;
}(IdleExpiry));
export { LocalStorageExpiry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxzdG9yYWdlZXhwaXJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWlkbGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9sb2NhbHN0b3JhZ2VleHBpcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUM7OztHQUdHO0FBRUg7SUFBd0Msc0NBQVU7SUFHaEQsNEJBQW9CLFlBQTBCO1FBQTlDLFlBQ0UsaUJBQU8sU0FDUjtRQUZtQixrQkFBWSxHQUFaLFlBQVksQ0FBYztRQUZ0QyxjQUFRLEdBQUcsTUFBTSxDQUFDOztJQUkxQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxpQ0FBSSxHQUFKLFVBQUssS0FBWTtRQUNmLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsbUNBQU0sR0FBTixVQUFPLEtBQWU7UUFDcEIsSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN2QjtRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRDs7O09BR0c7SUFDSCx3Q0FBVyxHQUFYO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSCx3Q0FBVyxHQUFYLFVBQVksR0FBVztRQUNyQixJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQztJQUVPLHNDQUFTLEdBQWpCO1FBQ0UsSUFBTSxNQUFNLEdBQVcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUM1RSxJQUFJLE1BQU0sRUFBRTtZQUNWLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUVPLHNDQUFTLEdBQWpCLFVBQWtCLEtBQVc7UUFDM0IsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLEVBQ3pCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FDM0IsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQztJQUVPLHNDQUFTLEdBQWpCO1FBQ0UsSUFBTSxNQUFNLEdBQVcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUM1RSxJQUFJLE1BQU0sRUFBRTtZQUNWLE9BQU8sTUFBTSxLQUFLLE1BQU0sQ0FBQztTQUMxQjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFTyxzQ0FBUyxHQUFqQixVQUFrQixLQUFjO1FBQzlCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDeEU7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQy9EO0lBQ0gsQ0FBQzs7Z0JBN0VpQyxZQUFZOztJQUhuQyxrQkFBa0I7UUFEOUIsVUFBVSxFQUFFO3lDQUl1QixZQUFZO09BSG5DLGtCQUFrQixDQWlGOUI7SUFBRCx5QkFBQztDQUFBLEFBakZELENBQXdDLFVBQVUsR0FpRmpEO1NBakZZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElkbGVFeHBpcnkgfSBmcm9tICcuL2lkbGVleHBpcnknO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlIH0gZnJvbSAnLi9sb2NhbHN0b3JhZ2UnO1xuXG4vKlxuICogUmVwcmVzZW50cyBhIGxvY2FsU3RvcmFnZSBzdG9yZSBvZiBleHBpcnkgdmFsdWVzLlxuICogQGV4dGVuZHMgSWRsZUV4cGlyeVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlRXhwaXJ5IGV4dGVuZHMgSWRsZUV4cGlyeSB7XG4gIHByaXZhdGUgaWRsZU5hbWUgPSAnbWFpbic7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2NhbFN0b3JhZ2U6IExvY2FsU3RvcmFnZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIGxhc3QgZXhwaXJ5IGRhdGUgaW4gbG9jYWxTdG9yYWdlLlxuICAgKiBJZiBsb2NhbFN0b3JhZ2UgZG9lc24ndCB3b3JrIGNvcnJlY3RseSAoaS5lLiBTYWZhcmkgaW4gcHJpdmF0ZSBtb2RlKSwgd2Ugc3RvcmUgdGhlIGV4cGlyeSB2YWx1ZSBpbiBtZW1vcnkuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBleHBpcnkgdmFsdWUgdG8gc2V0OyBvbWl0IHRvIG9ubHkgcmV0dXJuIHRoZSB2YWx1ZS5cbiAgICogQHJldHVybiBUaGUgY3VycmVudCBleHBpcnkgdmFsdWUuXG4gICAqL1xuICBsYXN0KHZhbHVlPzogRGF0ZSk6IERhdGUge1xuICAgIGlmICh2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnNldEV4cGlyeSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldEV4cGlyeSgpO1xuICB9XG5cbiAgaWRsaW5nKHZhbHVlPzogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgIGlmICh2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLnNldElkbGluZyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldElkbGluZygpO1xuICB9XG5cbiAgLypcbiAgICogR2V0cyB0aGUgaWRsZSBuYW1lLlxuICAgKiBAcmV0dXJuIFRoZSBuYW1lIG9mIHRoZSBpZGxlLlxuICAgKi9cbiAgZ2V0SWRsZU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pZGxlTmFtZTtcbiAgfVxuXG4gIC8qXG4gICAqIFNldHMgdGhlIGlkbGUgbmFtZS5cbiAgICogQHBhcmFtIFRoZSBuYW1lIG9mIHRoZSBpZGxlLlxuICAgKi9cbiAgc2V0SWRsZU5hbWUoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoa2V5KSB7XG4gICAgICB0aGlzLmlkbGVOYW1lID0ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0RXhwaXJ5KCk6IERhdGUge1xuICAgIGNvbnN0IGV4cGlyeTogc3RyaW5nID0gdGhpcy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmlkbGVOYW1lICsgJy5leHBpcnknKTtcbiAgICBpZiAoZXhwaXJ5KSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUocGFyc2VJbnQoZXhwaXJ5LCAxMCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldEV4cGlyeSh2YWx1ZTogRGF0ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgdGhpcy5pZGxlTmFtZSArICcuZXhwaXJ5JyxcbiAgICAgICAgdmFsdWUuZ2V0VGltZSgpLnRvU3RyaW5nKClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5pZGxlTmFtZSArICcuZXhwaXJ5Jyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRJZGxpbmcoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaWRsaW5nOiBzdHJpbmcgPSB0aGlzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuaWRsZU5hbWUgKyAnLmlkbGluZycpO1xuICAgIGlmIChpZGxpbmcpIHtcbiAgICAgIHJldHVybiBpZGxpbmcgPT09ICd0cnVlJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0SWRsaW5nKHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuaWRsZU5hbWUgKyAnLmlkbGluZycsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuaWRsZU5hbWUgKyAnLmlkbGluZycsICdmYWxzZScpO1xuICAgIH1cbiAgfVxufVxuIl19