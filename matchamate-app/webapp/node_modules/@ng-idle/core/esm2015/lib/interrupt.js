/*
 * A class for managing an interrupt from an interrupt source.
 */
export class Interrupt {
    constructor(source) {
        this.source = source;
    }
    /*
     * Subscribes to the interrupt using the specified function.
     * @param fn - The subscription function.
     */
    subscribe(fn) {
        this.sub = this.source.onInterrupt.subscribe(fn);
    }
    /*
     * Unsubscribes the interrupt.
     */
    unsubscribe() {
        this.sub.unsubscribe();
        this.sub = null;
    }
    /*
     * Keeps the subscription but resumes interrupt events.
     */
    resume() {
        this.source.attach();
    }
    /*
     * Keeps the subscription but pauses interrupt events.
     */
    pause() {
        this.source.detach();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJydXB0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWlkbGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcnJ1cHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0E7O0dBRUc7QUFDSCxNQUFNLE9BQU8sU0FBUztJQUdwQixZQUFtQixNQUF1QjtRQUF2QixXQUFNLEdBQU4sTUFBTSxDQUFpQjtJQUFHLENBQUM7SUFFOUM7OztPQUdHO0lBQ0gsU0FBUyxDQUFDLEVBQWlDO1FBQ3pDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDVCxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDSixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJbnRlcnJ1cHRBcmdzIH0gZnJvbSAnLi9pbnRlcnJ1cHRhcmdzJztcbmltcG9ydCB7IEludGVycnVwdFNvdXJjZSB9IGZyb20gJy4vaW50ZXJydXB0c291cmNlJztcblxuLypcbiAqIEEgY2xhc3MgZm9yIG1hbmFnaW5nIGFuIGludGVycnVwdCBmcm9tIGFuIGludGVycnVwdCBzb3VyY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnRlcnJ1cHQge1xuICBwcml2YXRlIHN1YjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzb3VyY2U6IEludGVycnVwdFNvdXJjZSkge31cblxuICAvKlxuICAgKiBTdWJzY3JpYmVzIHRvIHRoZSBpbnRlcnJ1cHQgdXNpbmcgdGhlIHNwZWNpZmllZCBmdW5jdGlvbi5cbiAgICogQHBhcmFtIGZuIC0gVGhlIHN1YnNjcmlwdGlvbiBmdW5jdGlvbi5cbiAgICovXG4gIHN1YnNjcmliZShmbjogKGFyZ3M6IEludGVycnVwdEFyZ3MpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLnN1YiA9IHRoaXMuc291cmNlLm9uSW50ZXJydXB0LnN1YnNjcmliZShmbik7XG4gIH1cblxuICAvKlxuICAgKiBVbnN1YnNjcmliZXMgdGhlIGludGVycnVwdC5cbiAgICovXG4gIHVuc3Vic2NyaWJlKCk6IHZvaWQge1xuICAgIHRoaXMuc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5zdWIgPSBudWxsO1xuICB9XG5cbiAgLypcbiAgICogS2VlcHMgdGhlIHN1YnNjcmlwdGlvbiBidXQgcmVzdW1lcyBpbnRlcnJ1cHQgZXZlbnRzLlxuICAgKi9cbiAgcmVzdW1lKCk6IHZvaWQge1xuICAgIHRoaXMuc291cmNlLmF0dGFjaCgpO1xuICB9XG5cbiAgLypcbiAgICogS2VlcHMgdGhlIHN1YnNjcmlwdGlvbiBidXQgcGF1c2VzIGludGVycnVwdCBldmVudHMuXG4gICAqL1xuICBwYXVzZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNvdXJjZS5kZXRhY2goKTtcbiAgfVxufVxuIl19