import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { IdleExpiry } from './idleexpiry';
import { LocalStorage } from './localstorage';
/*
 * Represents a localStorage store of expiry values.
 * @extends IdleExpiry
 */
let LocalStorageExpiry = class LocalStorageExpiry extends IdleExpiry {
    constructor(localStorage) {
        super();
        this.localStorage = localStorage;
        this.idleName = 'main';
    }
    /*
     * Gets or sets the last expiry date in localStorage.
     * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.
     * @param value - The expiry value to set; omit to only return the value.
     * @return The current expiry value.
     */
    last(value) {
        if (value !== void 0) {
            this.setExpiry(value);
        }
        return this.getExpiry();
    }
    idling(value) {
        if (value !== void 0) {
            this.setIdling(value);
        }
        return this.getIdling();
    }
    /*
     * Gets the idle name.
     * @return The name of the idle.
     */
    getIdleName() {
        return this.idleName;
    }
    /*
     * Sets the idle name.
     * @param The name of the idle.
     */
    setIdleName(key) {
        if (key) {
            this.idleName = key;
        }
    }
    getExpiry() {
        const expiry = this.localStorage.getItem(this.idleName + '.expiry');
        if (expiry) {
            return new Date(parseInt(expiry, 10));
        }
        else {
            return null;
        }
    }
    setExpiry(value) {
        if (value) {
            this.localStorage.setItem(this.idleName + '.expiry', value.getTime().toString());
        }
        else {
            this.localStorage.removeItem(this.idleName + '.expiry');
        }
    }
    getIdling() {
        const idling = this.localStorage.getItem(this.idleName + '.idling');
        if (idling) {
            return idling === 'true';
        }
        else {
            return false;
        }
    }
    setIdling(value) {
        if (value) {
            this.localStorage.setItem(this.idleName + '.idling', value.toString());
        }
        else {
            this.localStorage.setItem(this.idleName + '.idling', 'false');
        }
    }
};
LocalStorageExpiry.ctorParameters = () => [
    { type: LocalStorage }
];
LocalStorageExpiry = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [LocalStorage])
], LocalStorageExpiry);
export { LocalStorageExpiry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxzdG9yYWdlZXhwaXJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWlkbGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9sb2NhbHN0b3JhZ2VleHBpcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUM7OztHQUdHO0FBRUgsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBbUIsU0FBUSxVQUFVO0lBR2hELFlBQW9CLFlBQTBCO1FBQzVDLEtBQUssRUFBRSxDQUFDO1FBRFUsaUJBQVksR0FBWixZQUFZLENBQWM7UUFGdEMsYUFBUSxHQUFHLE1BQU0sQ0FBQztJQUkxQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxJQUFJLENBQUMsS0FBWTtRQUNmLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWU7UUFDcEIsSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN2QjtRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxXQUFXLENBQUMsR0FBVztRQUNyQixJQUFJLEdBQUcsRUFBRTtZQUNQLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQztJQUVPLFNBQVM7UUFDZixNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQzVFLElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdkM7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDO0lBRU8sU0FBUyxDQUFDLEtBQVc7UUFDM0IsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLEVBQ3pCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FDM0IsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQztJQUVPLFNBQVM7UUFDZixNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQzVFLElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxNQUFNLEtBQUssTUFBTSxDQUFDO1NBQzFCO2FBQU07WUFDTCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVPLFNBQVMsQ0FBQyxLQUFjO1FBQzlCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDeEU7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQy9EO0lBQ0gsQ0FBQztDQUNGLENBQUE7O1lBOUVtQyxZQUFZOztBQUhuQyxrQkFBa0I7SUFEOUIsVUFBVSxFQUFFO3FDQUl1QixZQUFZO0dBSG5DLGtCQUFrQixDQWlGOUI7U0FqRlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWRsZUV4cGlyeSB9IGZyb20gJy4vaWRsZWV4cGlyeSc7XG5pbXBvcnQgeyBMb2NhbFN0b3JhZ2UgfSBmcm9tICcuL2xvY2Fsc3RvcmFnZSc7XG5cbi8qXG4gKiBSZXByZXNlbnRzIGEgbG9jYWxTdG9yYWdlIHN0b3JlIG9mIGV4cGlyeSB2YWx1ZXMuXG4gKiBAZXh0ZW5kcyBJZGxlRXhwaXJ5XG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VFeHBpcnkgZXh0ZW5kcyBJZGxlRXhwaXJ5IHtcbiAgcHJpdmF0ZSBpZGxlTmFtZSA9ICdtYWluJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2FsU3RvcmFnZTogTG9jYWxTdG9yYWdlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgbGFzdCBleHBpcnkgZGF0ZSBpbiBsb2NhbFN0b3JhZ2UuXG4gICAqIElmIGxvY2FsU3RvcmFnZSBkb2Vzbid0IHdvcmsgY29ycmVjdGx5IChpLmUuIFNhZmFyaSBpbiBwcml2YXRlIG1vZGUpLCB3ZSBzdG9yZSB0aGUgZXhwaXJ5IHZhbHVlIGluIG1lbW9yeS5cbiAgICogQHBhcmFtIHZhbHVlIC0gVGhlIGV4cGlyeSB2YWx1ZSB0byBzZXQ7IG9taXQgdG8gb25seSByZXR1cm4gdGhlIHZhbHVlLlxuICAgKiBAcmV0dXJuIFRoZSBjdXJyZW50IGV4cGlyeSB2YWx1ZS5cbiAgICovXG4gIGxhc3QodmFsdWU/OiBEYXRlKTogRGF0ZSB7XG4gICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMuc2V0RXhwaXJ5KHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0RXhwaXJ5KCk7XG4gIH1cblxuICBpZGxpbmcodmFsdWU/OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMuc2V0SWRsaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0SWRsaW5nKCk7XG4gIH1cblxuICAvKlxuICAgKiBHZXRzIHRoZSBpZGxlIG5hbWUuXG4gICAqIEByZXR1cm4gVGhlIG5hbWUgb2YgdGhlIGlkbGUuXG4gICAqL1xuICBnZXRJZGxlTmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlkbGVOYW1lO1xuICB9XG5cbiAgLypcbiAgICogU2V0cyB0aGUgaWRsZSBuYW1lLlxuICAgKiBAcGFyYW0gVGhlIG5hbWUgb2YgdGhlIGlkbGUuXG4gICAqL1xuICBzZXRJZGxlTmFtZShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChrZXkpIHtcbiAgICAgIHRoaXMuaWRsZU5hbWUgPSBrZXk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeHBpcnkoKTogRGF0ZSB7XG4gICAgY29uc3QgZXhwaXJ5OiBzdHJpbmcgPSB0aGlzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuaWRsZU5hbWUgKyAnLmV4cGlyeScpO1xuICAgIGlmIChleHBpcnkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShwYXJzZUludChleHBpcnksIDEwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0RXhwaXJ5KHZhbHVlOiBEYXRlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICB0aGlzLmlkbGVOYW1lICsgJy5leHBpcnknLFxuICAgICAgICB2YWx1ZS5nZXRUaW1lKCkudG9TdHJpbmcoKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmlkbGVOYW1lICsgJy5leHBpcnknKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldElkbGluZygpOiBib29sZWFuIHtcbiAgICBjb25zdCBpZGxpbmc6IHN0cmluZyA9IHRoaXMubG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5pZGxlTmFtZSArICcuaWRsaW5nJyk7XG4gICAgaWYgKGlkbGluZykge1xuICAgICAgcmV0dXJuIGlkbGluZyA9PT0gJ3RydWUnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRJZGxpbmcodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMubG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5pZGxlTmFtZSArICcuaWRsaW5nJywgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5pZGxlTmFtZSArICcuaWRsaW5nJywgJ2ZhbHNlJyk7XG4gICAgfVxuICB9XG59XG4iXX0=