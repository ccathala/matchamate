/*
 * Represents a base class for types that provide expiry detection for the Idle service.
 */
export class IdleExpiry {
    constructor() {
        this.idValue = new Date();
        this.idlingValue = false;
    }
    /*
     * Gets or sets a unique ID for the window
     * @param id - The id.
     * @return The current id.
     */
    id(value) {
        if (value !== void 0) {
            if (!value) {
                throw new Error('A value must be specified for the ID.');
            }
            this.idValue = value;
        }
        return this.idValue;
    }
    /*
     * Gets or sets the idling value.
     * @param value - The value to set.
     * @return The idling value.
     */
    idling(value) {
        if (value !== void 0) {
            this.idlingValue = value;
        }
        return this.idlingValue;
    }
    /*
     * Returns the current Date.
     * @return The current Date.
     */
    now() {
        /* istanbul ignore next */
        return new Date();
    }
    /*
     * Returns whether or not it is expired.
     * @return True if expired; otherwise, false.
     */
    isExpired() {
        const expiry = this.last();
        return expiry != null && expiry <= this.now();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRsZWV4cGlyeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1pZGxlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvaWRsZWV4cGlyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sT0FBZ0IsVUFBVTtJQUk5QjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEVBQUUsQ0FBQyxLQUFXO1FBQ1osSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDVixNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7YUFDMUQ7WUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztTQUN0QjtRQUVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBU0Q7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxLQUFlO1FBQ3BCLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQzFCO1FBRUQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxHQUFHO1FBQ0QsMEJBQTBCO1FBQzFCLE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBUztRQUNQLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMzQixPQUFPLE1BQU0sSUFBSSxJQUFJLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogUmVwcmVzZW50cyBhIGJhc2UgY2xhc3MgZm9yIHR5cGVzIHRoYXQgcHJvdmlkZSBleHBpcnkgZGV0ZWN0aW9uIGZvciB0aGUgSWRsZSBzZXJ2aWNlLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSWRsZUV4cGlyeSB7XG4gIHByb3RlY3RlZCBpZFZhbHVlOiBhbnk7XG4gIHByb3RlY3RlZCBpZGxpbmdWYWx1ZTogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmlkVmFsdWUgPSBuZXcgRGF0ZSgpO1xuICAgIHRoaXMuaWRsaW5nVmFsdWUgPSBmYWxzZTtcbiAgfVxuXG4gIC8qXG4gICAqIEdldHMgb3Igc2V0cyBhIHVuaXF1ZSBJRCBmb3IgdGhlIHdpbmRvd1xuICAgKiBAcGFyYW0gaWQgLSBUaGUgaWQuXG4gICAqIEByZXR1cm4gVGhlIGN1cnJlbnQgaWQuXG4gICAqL1xuICBpZCh2YWx1ZT86IGFueSk6IGFueSB7XG4gICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIHZhbHVlIG11c3QgYmUgc3BlY2lmaWVkIGZvciB0aGUgSUQuJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaWRWYWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmlkVmFsdWU7XG4gIH1cblxuICAvKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIGxhc3QgZXhwaXJ5IGRhdGUuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAqIEByZXR1cm4gVGhlIGxhc3QgZXhwaXJ5IHZhbHVlLlxuICAgKi9cbiAgYWJzdHJhY3QgbGFzdCh2YWx1ZT86IERhdGUpOiBEYXRlO1xuXG4gIC8qXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgaWRsaW5nIHZhbHVlLlxuICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgKiBAcmV0dXJuIFRoZSBpZGxpbmcgdmFsdWUuXG4gICAqL1xuICBpZGxpbmcodmFsdWU/OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMuaWRsaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pZGxpbmdWYWx1ZTtcbiAgfVxuXG4gIC8qXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgRGF0ZS5cbiAgICogQHJldHVybiBUaGUgY3VycmVudCBEYXRlLlxuICAgKi9cbiAgbm93KCk6IERhdGUge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIG5ldyBEYXRlKCk7XG4gIH1cblxuICAvKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGl0IGlzIGV4cGlyZWQuXG4gICAqIEByZXR1cm4gVHJ1ZSBpZiBleHBpcmVkOyBvdGhlcndpc2UsIGZhbHNlLlxuICAgKi9cbiAgaXNFeHBpcmVkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGV4cGlyeSA9IHRoaXMubGFzdCgpO1xuICAgIHJldHVybiBleHBpcnkgIT0gbnVsbCAmJiBleHBpcnkgPD0gdGhpcy5ub3coKTtcbiAgfVxufVxuIl19