import { EventEmitter } from '@angular/core';
/*
 * A base for classes that act as a source for interrupts.
 */
export class InterruptSource {
    constructor(attachFn, detachFn) {
        this.attachFn = attachFn;
        this.detachFn = detachFn;
        this.isAttached = false;
        this.onInterrupt = new EventEmitter();
    }
    /*
     * Attaches to the specified events on the specified source.
     */
    attach() {
        // If the current zone is the 'angular' zone (a.k.a. NgZone) then re-enter this method in its parent zone
        // The parent zone is usually the '<root>' zone but it can also be 'long-stack-trace-zone' in debug mode
        // In tests, the current zone is typically a 'ProxyZone' created by async/fakeAsync (from @angular/core/testing)
        if (Zone.current.get('isAngularZone') === true) {
            Zone.current.parent.run(() => this.attach());
            return;
        }
        if (!this.isAttached && this.attachFn) {
            this.attachFn(this);
        }
        this.isAttached = true;
    }
    /*
     * Detaches from the specified events on the specified source.
     */
    detach() {
        if (this.isAttached && this.detachFn) {
            this.detachFn(this);
        }
        this.isAttached = false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJydXB0c291cmNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWlkbGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcnJ1cHRzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU03Qzs7R0FFRztBQUNILE1BQU0sT0FBZ0IsZUFBZTtJQU9uQyxZQUNZLFFBQTRDLEVBQzVDLFFBQTRDO1FBRDVDLGFBQVEsR0FBUixRQUFRLENBQW9DO1FBQzVDLGFBQVEsR0FBUixRQUFRLENBQW9DO1FBUnhELGVBQVUsR0FBRyxLQUFLLENBQUM7UUFFWixnQkFBVyxHQUFnQyxJQUFJLFlBQVksRUFFL0QsQ0FBQztJQUtELENBQUM7SUFFSjs7T0FFRztJQUNILE1BQU07UUFDSix5R0FBeUc7UUFDekcsd0dBQXdHO1FBQ3hHLGdIQUFnSDtRQUNoSCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDN0MsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JCO1FBRUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTTtRQUNKLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckI7UUFFRCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW50ZXJydXB0QXJncyB9IGZyb20gJy4vaW50ZXJydXB0YXJncyc7XG5cbmRlY2xhcmUgY29uc3QgWm9uZTogYW55O1xuXG4vKlxuICogQSBiYXNlIGZvciBjbGFzc2VzIHRoYXQgYWN0IGFzIGEgc291cmNlIGZvciBpbnRlcnJ1cHRzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW50ZXJydXB0U291cmNlIHtcbiAgaXNBdHRhY2hlZCA9IGZhbHNlO1xuXG4gIHB1YmxpYyBvbkludGVycnVwdDogRXZlbnRFbWl0dGVyPEludGVycnVwdEFyZ3M+ID0gbmV3IEV2ZW50RW1pdHRlcjxcbiAgICBJbnRlcnJ1cHRBcmdzXG4gID4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgYXR0YWNoRm4/OiAoc291cmNlOiBJbnRlcnJ1cHRTb3VyY2UpID0+IHZvaWQsXG4gICAgcHJvdGVjdGVkIGRldGFjaEZuPzogKHNvdXJjZTogSW50ZXJydXB0U291cmNlKSA9PiB2b2lkXG4gICkge31cblxuICAvKlxuICAgKiBBdHRhY2hlcyB0byB0aGUgc3BlY2lmaWVkIGV2ZW50cyBvbiB0aGUgc3BlY2lmaWVkIHNvdXJjZS5cbiAgICovXG4gIGF0dGFjaCgpOiB2b2lkIHtcbiAgICAvLyBJZiB0aGUgY3VycmVudCB6b25lIGlzIHRoZSAnYW5ndWxhcicgem9uZSAoYS5rLmEuIE5nWm9uZSkgdGhlbiByZS1lbnRlciB0aGlzIG1ldGhvZCBpbiBpdHMgcGFyZW50IHpvbmVcbiAgICAvLyBUaGUgcGFyZW50IHpvbmUgaXMgdXN1YWxseSB0aGUgJzxyb290Picgem9uZSBidXQgaXQgY2FuIGFsc28gYmUgJ2xvbmctc3RhY2stdHJhY2Utem9uZScgaW4gZGVidWcgbW9kZVxuICAgIC8vIEluIHRlc3RzLCB0aGUgY3VycmVudCB6b25lIGlzIHR5cGljYWxseSBhICdQcm94eVpvbmUnIGNyZWF0ZWQgYnkgYXN5bmMvZmFrZUFzeW5jIChmcm9tIEBhbmd1bGFyL2NvcmUvdGVzdGluZylcbiAgICBpZiAoWm9uZS5jdXJyZW50LmdldCgnaXNBbmd1bGFyWm9uZScpID09PSB0cnVlKSB7XG4gICAgICBab25lLmN1cnJlbnQucGFyZW50LnJ1bigoKSA9PiB0aGlzLmF0dGFjaCgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNBdHRhY2hlZCAmJiB0aGlzLmF0dGFjaEZuKSB7XG4gICAgICB0aGlzLmF0dGFjaEZuKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMuaXNBdHRhY2hlZCA9IHRydWU7XG4gIH1cblxuICAvKlxuICAgKiBEZXRhY2hlcyBmcm9tIHRoZSBzcGVjaWZpZWQgZXZlbnRzIG9uIHRoZSBzcGVjaWZpZWQgc291cmNlLlxuICAgKi9cbiAgZGV0YWNoKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzQXR0YWNoZWQgJiYgdGhpcy5kZXRhY2hGbikge1xuICAgICAgdGhpcy5kZXRhY2hGbih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzQXR0YWNoZWQgPSBmYWxzZTtcbiAgfVxufVxuIl19