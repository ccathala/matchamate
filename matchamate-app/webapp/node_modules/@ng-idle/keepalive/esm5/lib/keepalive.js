import { __decorate, __extends, __metadata } from "tslib";
import { EventEmitter, Injectable, NgZone, OnDestroy } from '@angular/core';
import { HttpClient, HttpRequest, HttpResponse } from '@angular/common/http';
import { KeepaliveSvc } from '@ng-idle/core';
/**
 * An example of an injectable service.
 */
var Keepalive = /** @class */ (function (_super) {
    __extends(Keepalive, _super);
    /*
     * Initializes a new instance of Keepalive
     * @param http - The HTTP service.
     */
    function Keepalive(http, zone) {
        var _this = _super.call(this) || this;
        _this.http = http;
        _this.zone = zone;
        _this.pingInterval = 10 * 60;
        /*
         * An event emitted when the service is pinging.
         */
        _this.onPing = new EventEmitter();
        /*
         * An event emitted when the service has pinged an HTTP endpoint and received a response.
         */
        _this.onPingResponse = new EventEmitter();
        return _this;
    }
    /*
     * Sets the string or Request that should be used when pinging.
     * @param url - The URL or Request object to use when pinging.
     * @return The current Request used when pinging.
     */
    Keepalive.prototype.request = function (url) {
        if (typeof url === 'string') {
            this.pingRequest = new HttpRequest('GET', url);
        }
        else if (url instanceof HttpRequest) {
            this.pingRequest = url;
        }
        else if (url === null) {
            this.pingRequest = null;
        }
        return this.pingRequest;
    };
    /*
     * Sets the interval (in seconds) at which the ping operation will occur when start() is called.
     * @param seconds - The ping interval in seconds.
     * @return The current interval value.
     */
    Keepalive.prototype.interval = function (seconds) {
        if (!isNaN(seconds) && seconds > 0) {
            this.pingInterval = seconds;
        }
        else if (!isNaN(seconds) && seconds <= 0) {
            throw new Error('Interval value must be greater than zero.');
        }
        return this.pingInterval;
    };
    /*
     * Immediately performs the ping operation. If a request has been set, an HTTP
     * request will be made and the response will be emitted via the
     * onPingResponse event.
     */
    Keepalive.prototype.ping = function () {
        var _this = this;
        this.onPing.emit(null);
        if (this.pingRequest) {
            this.http.request(this.pingRequest).subscribe(function (response) {
                _this.onPingResponse.emit(response);
            }, function (error) {
                _this.onPingResponse.emit(error);
            });
        }
    };
    /*
     * Starts pinging on an interval.
     */
    Keepalive.prototype.start = function () {
        var _this = this;
        this.stop();
        this.zone.runOutsideAngular(function () {
            _this.pingHandle = setInterval(function () {
                _this.zone.run(function () {
                    _this.ping();
                });
            }, _this.pingInterval * 1000);
        });
    };
    /*
     * Stops pinging on an interval.
     */
    Keepalive.prototype.stop = function () {
        if (this.hasPingHandle()) {
            clearInterval(this.pingHandle);
            this.pingHandle = null;
        }
    };
    /*
     * Performs any cleanup tasks when Angular destroys the instance.
     */
    Keepalive.prototype.ngOnDestroy = function () {
        this.stop();
    };
    /*
     * Returns whether or not the service will ping automatically at the specified interval.
     * @return True if the service will ping at the specified interval; otherwise, false.
     */
    Keepalive.prototype.isRunning = function () {
        return this.hasPingHandle();
    };
    Keepalive.prototype.hasPingHandle = function () {
        return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';
    };
    Keepalive.ctorParameters = function () { return [
        { type: HttpClient },
        { type: NgZone }
    ]; };
    Keepalive = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient, NgZone])
    ], Keepalive);
    return Keepalive;
}(KeepaliveSvc));
export { Keepalive };
//# sourceMappingURL=data:application/json;base64,